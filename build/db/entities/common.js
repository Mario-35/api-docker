"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(t,e,s,i){void 0===i&&(i=s),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[s]}})}:function(t,e,s,i){void 0===i&&(i=s),t[i]=e[s]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),__importStar=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var s in t)"default"!==s&&Object.prototype.hasOwnProperty.call(t,s)&&__createBinding(e,t,s);return __setModuleDefault(e,t),e};Object.defineProperty(exports,"__esModule",{value:!0}),exports.Common=void 0;const constants_1=require("../../constants"),entities=__importStar(require("./index")),index_1=require("../../utils/index");class Common{constructor(t,e,s){this.ctx=t,this.args=e,this.args.debug&&(0,index_1.message)("HEAD",`class common [${this.constructor.name}]`),s&&(Common.dbContext=s),this.entityProperty=constants_1._DBDATAS[this.constructor.name],this.nextLinkBase=`http://${this.args.baseUrl}/${this.args.version}/${this.args.entities.join("/")}`,this.linkBase=constants_1.isTest?`proxy/${this.args.version}/${this.constructor.name}`:`http://${this.args.baseUrl}/${this.args.version}/${this.constructor.name}`}toJson(t){return JSON.stringify(t,(t,e)=>"bigint"==typeof e?e+"#bigint":e).replace(/"(-?\d+)#bigint"/g,(t,e)=>e)}async executeQuery(t){this.args.debug&&(0,index_1.message)("HEAD","executeQuery");const e="string"==typeof t;return(0,index_1.addToLog)(this.ctx,"query",e?t:t.toQuery()),e?await Common.dbContext.raw(t):await t}formatReturnResult(t){this.args.debug&&(0,index_1.message)("HEAD","formatReturnResult");const e={id:void 0,entity:this.entityProperty,nextLink:t.nextLink?t.nextLink:void 0,prevLink:t.prevLink?t.prevLink:void 0,result:void 0,value:void 0,body:void 0,total:void 0};return Object.keys(t).forEach(s=>{e[s]=t[s]}),e}isKeyValueObject(t){return t&&"object"==typeof t&&t.length>0}async formatLineResult(t){this.args.debug&&(0,index_1.message)("HEAD",`class common formatLineResult [${this.constructor.name}]`);const e=t.id?`${this.linkBase}(${t.id.toString()})`:void 0;t=Object.assign({},(0,index_1.renameProp)("id","@iot.id",t));return await(async()=>{const s=this.entityProperty.relations?Object.keys(this.entityProperty.relations).filter(t=>!this.entityProperty.relations[t].columnRelation.startsWith("_")):[],i={};return e&&(t["@iot.selfLink"]=""+e),Object.keys(t).filter(t=>!t.trim().endsWith("_id")).sort((t,e)=>t>e?1:-1).forEach(e=>{if(this.isKeyValueObject(t[e])){const s={};Object.keys(t[e]).sort((t,e)=>t<e?-1:t>e?1:0).forEach(i=>{s[i]=t[e][i]}),t[e]=s}i[e]=t[e]}),await(0,index_1.asyncForEach)(s.sort((t,e)=>t>e?1:-1),async s=>{this.args.odada.includes.length>0?await(0,index_1.asyncForEach)(this.args.odada.includes,async(a,n)=>{const o=a.navigationProperty.split("/"),r=o?o[0]:void 0;if(r&&r.includes(s)){this.args.debug&&(0,index_1.message)("DEBUG","Expand for "+r,s);const e=(0,index_1.getEntityName)(s);if(e){const a=JSON.parse(this.toJson(this.args));a&&a.odada&&(a.odada.includes[n].navigationProperty=this.args.odada&&this.args.odada&&o?o.slice(1).join("/"):"");const d=new entities[e](this.ctx,a),c=s==constants_1._DBDATAS[e].singular,l=this.entityProperty.relations[s];let g=[],h=`${l.columnRelation} = ${BigInt(t["@iot.id"])}`;if(l.tableName==this.entityProperty.table)g=[BigInt(t[l.entityColumn])],h=`${l.columnRelation} = ${g}`;else if(d.entityProperty.relations&&d.entityProperty.relations[this.entityProperty.name]&&l.tableName==d.entityProperty.relations[this.entityProperty.name].tableName)try{(await Common.dbContext(l.tableName).select(l.columnRelation).whereRaw(`${l.entityColumn} = ${t["@iot.id"]}`)).forEach(t=>g.push(BigInt(t[l.columnRelation]))),h=`id IN (${g})`}catch(t){h="",t instanceof Error&&this.ctx.throw(400,{detail:t.message})}else if(l.tableName!=this.entityProperty.table&&!(0,index_1.getEntityName)(l.tableName)){this.args.debug&&(0,index_1.message)("DEBUG",`Table Association for ${r} : `,s);try{(await Common.dbContext(l.tableName).select({id:l.columnRelation}).where({[l.entityColumn]:t["@iot.id"]})).forEach(t=>g.push(BigInt(t.id))),h=`id IN (${g})`}catch(t){h="",t instanceof Error&&this.ctx.throw(400,{detail:t.message})}}const m=await d.getWhereFormat(h);i[s]=c?m[0]:m}else this.args.debug&&(0,index_1.message)("ERROR","No entity for",s)}else i[s+"@iot.navigationLink"]=`${e}/${s}`}):i[s+"@iot.navigationLink"]=`${e}/${s}`}),i})()}async formatResult(t){if(this.args.debug&&(0,index_1.message)("HEAD",`class common formatResult [${this.constructor.name}]`),this.isKeyValueObject(t)){const e=[],s=async()=>(await(0,index_1.asyncForEach)(t,async t=>{const s=await this.formatLineResult(t);s&&e.push(s)}),e);return await s()}}convertOdataToKnex(t){var e;const s=null===(e=t.match(/[a-z,A-Z]/g))||void 0===e?void 0:e.join("").trim().split(",");return s||["*"]}makeOdataQuery(t,e){const s=this.args.odada;if(s&&(t.limit(s.limit&&s.limit>0?s.limit:Number(process.env.APILIMIT)),t.offset(s.skip&&s.skip>0?s.skip:0)),t.select(s&&s.select?this.convertOdataToKnex(s.select):e?[e]:["*"]),t.orderByRaw(s&&s.orderby?s.orderby.replace(/"/g,""):"id"),s&&s.where){const e=s.where.split(":");for(let t=1;t<e.length;t+=2)e[t]=s.parameters[e[t]];t.whereRaw(e.join(" "))}return t}async getAll(t){this.args.debug&&(0,index_1.message)("HEAD",`class common getAll [${this.constructor.name}]`);const e=Common.dbContext(this.entityProperty.table);if(this.args.entities.length>1){const t=(0,index_1.getEntityName)(this.args.entities[0]);this.args.debug&&(0,index_1.message)("DEBUG","Found entity : ",t);const s=t?constants_1._DBDATAS[t]:void 0,i=(0,index_1.getBigIntFromString)(this.args.entities[0]);if(!s||!i)return void(this.args.debug&&(0,index_1.message)("DEBUG","No entity or id for",t));{const t=new entities[s.name](this.ctx,Object.assign({},this.args)),a=await t.getSingle(i,"id",!0);if(a&&a.body&&a.id&&a.id>0)if(this.args.debug&&(0,index_1.message)("DEBUG","Found Id : ",a.id.toString()),Object.keys(this.entityProperty.columns).includes(s.table.toLowerCase()+"_id"))e.where({[s.table.toLowerCase()+"_id"]:a.body});else if(Object.keys(this.entityProperty.relations).includes(s.name)){const t=this.entityProperty.relations[s.name];e.whereRaw(`id in (select ${t.columnRelation} from ${t.tableName} where ${t.entityColumn} = ${a.id})`)}else this.args.debug&&(0,index_1.message)("ERROR","No relation resolving");else this.ctx.throw(404,{detail:"No id for : "+this.args.entities[0]})}}const s=await this.executeQuery(this.makeOdataQuery(e,t)),i=this.args.odada.limit?this.args.odada.limit:Number(process.env.APILIMIT),a=this.args.odada.skip?this.args.odada.skip:0,n=a+i,o=a-i;return s&&s.length>0?this.formatReturnResult({id:BigInt(s.length),result:s,nextLink:process.env.APILIMIT&&s.length>=Number(process.env.APILIMIT)?`${this.nextLinkBase}?$top=${i}&$skip=${n}`:void 0,prevLink:process.env.APILIMIT&&s.length>=Number(process.env.APILIMIT)&&o>=0?`${this.nextLinkBase}?$top=${i}&$skip=${o}`:void 0,value:await this.formatResult(s)}):void 0}async getWhere(t){this.args.debug&&(0,index_1.message)("HEAD",`class common getWhere [${this.constructor.name}]`);try{return await Common.dbContext(this.entityProperty.table).whereRaw(t)}catch(t){t instanceof Error&&(this.args.debug&&(0,index_1.message)("ERROR",t.message),this.ctx.throw(400,{detail:(0,index_1.extractMessageError)(t.message)}))}}async getWhereFormat(t){this.args.debug&&(0,index_1.message)("HEAD",`class common getWhereFormat [${this.constructor.name}]`);try{const e=Common.dbContext(this.entityProperty.table).whereRaw(t);(0,index_1.addToLog)(this.ctx,"query",e.toQuery());const s=await e;return s?await this.formatResult(s):void 0}catch(t){t instanceof Error&&(this.args.debug&&(0,index_1.message)("ERROR",t.message),this.ctx.throw(400,{detail:(0,index_1.extractMessageError)(t.message)}))}}async getSingle(t,e,s){this.args.debug&&(0,index_1.message)("HEAD",`class common getSingle [${this.constructor.name}]`);const i=e?[e]:this.args.odada.select?this.convertOdataToKnex(this.args.odada.select):["*"],a=Common.dbContext(this.entityProperty.table).select(i).where({id:t}).first(),n=await this.executeQuery(a);if(n)return this.formatReturnResult({id:n.id?BigInt(n.id):void 0,body:"*"!=i[0]?s&&!0===s?n[i[0]].replace(/['"]+/g,""):n:await this.formatLineResult(n)})}async getRelation(t,e){this.args.debug&&(0,index_1.message)("HEAD",`class common getRelation [${this.constructor.name}]`),this.args.debug&&(0,index_1.message)("DEBUG","RelationName ",e);const s=await Common.dbContext(this.entityProperty.table).select("id").where(t&&void 0!==t?{id:t}:{}).first();if(s&&e&&this.entityProperty.relations){if(constants_1._DBDATAS[e]){if(e&&e){const t=new entities[e](this.ctx,Object.assign({},this.args)),i=e,a=await t.getWhereFormat(`"${i}"=${s.id}`);if(a)return this.formatReturnResult({body:a})}}}}async add(t){if(this.args.debug&&(0,index_1.message)("HEAD",`class Common add [${this.constructor.name}]`),t){const e=this.creatAddUpdateQuery(t);try{(0,index_1.addToLog)(this.ctx,"query",e);const t=await Common.dbContext.raw(e);if(t.rows){const s=await this.formatLineResult(t.rows[0]);if(s)return this.formatReturnResult({id:s.id?BigInt(t.id):void 0,result:s,value:s,body:s,query:e})}}catch(t){t instanceof Error&&(this.args.debug&&(0,index_1.message)("ERROR",t.message),this.ctx.throw(400,{detail:(0,index_1.extractMessageError)(t.message)}))}}}async update(t,e){this.args.debug&&(0,index_1.message)("HEAD",`class common update [${this.constructor.name}]`);if(!1===await(0,index_1.verifyId)(Common.dbContext,t,this.entityProperty.table)&&this.ctx.throw(404,{detail:"No id found for : "+t}),e){const s=this.creatAddUpdateQuery(e,t);(0,index_1.addToLog)(this.ctx,"query",s);try{const t=await Common.dbContext.raw(s);if(t.rows){const e=await this.formatLineResult(t.rows[0]);if(e)return this.formatReturnResult({id:e.id?BigInt(t.id):void 0,result:e,value:e,body:e})}}catch(t){t instanceof Error&&(this.args.debug&&(0,index_1.message)("ERROR",t.message),this.ctx.throw(400,{detail:(0,index_1.extractMessageError)(t.message)}))}}}async delete(t){this.args.debug&&(0,index_1.message)("HEAD",`class common delete [${this.constructor.name}]`);try{const e=Common.dbContext(this.entityProperty.table).del().where({id:t});(0,index_1.addToLog)(this.ctx,"query",e.toQuery());const s=await e;return this.formatReturnResult({id:BigInt(s)})}catch(t){t instanceof Error&&(this.args.debug&&(0,index_1.message)("ERROR",t.message),this.ctx.throw(400,{detail:(0,index_1.extractMessageError)(t.message)}))}}creatAddUpdateQuery(t,e){let s;!function(t){t[t.Table=0]="Table",t[t.Relation=1]="Relation",t[t.Association=2]="Association"}(s||(s={}));const i={},a={[this.entityProperty.table]:this.entityProperty.table};let n=0;const o=(t,e)=>Object.keys(t.relations).includes(e.name)?e.name:Object.keys(t.relations).includes(e.singular)?e.singular:void 0,r=t=>{const a=[t],n={},o=[];return Object.keys(i).forEach(t=>{Object.keys(i).forEach(e=>{JSON.stringify(i[e].datas).includes("select "+t)&&(n[e]?n[e].push(t):n[e]=[t])})}),Object.keys(i).forEach(t=>{Object.keys(n).includes(t)?o.push(t):o.unshift(t)}),o.forEach(t=>{if(i[t].datas.hasOwnProperty("@iot.id")){const e=i[t].datas["@iot.id"];a.push(`, ${t} AS (select coalesce((select "id" from "${i[t].table}" where "id" = ${e}), ${e}) AS id)`)}else{const n=Common.dbContext(i[t].table);a.push(`, ${t} AS (`),e?i[t].type==s.Association?a.push(n.insert(i[t].datas).onConflict(Object.keys(i[t].datas)).merge(i[t].datas).whereRaw(`${i[t].table}.${i[t].keyId} = ${BigInt(e).toString()}`).toString()):a.push(n.update(i[t].datas).whereRaw(`${i[t].table}.${i[t].keyId} = ${BigInt(e).toString()}`).toString()):a.push(n.insert(i[t].datas).toString()),a.push(`RETURNING ${this.entityProperty.table==i[t].table?"*":i[t].keyId})`)}}),a.push(`SELECT * FROM ${this.entityProperty.table};`),a.join("\n").replace(/\'@/g,"").replace(/\@'/g,"")},d=(t,e,r)=>{this.args.debug&&(0,index_1.message)("HEAD","start level "+n++);const c={};e=e||this.entityProperty,r=r||this.entityProperty;for(const s in t)e&&!Object.keys(e.relations).includes(s)&&(c[s]="object"==typeof t[s]?JSON.stringify(t[s]):t[s],delete t[s]);const l=(t,e,s,a,n,o)=>{const r="string"==typeof a;i.hasOwnProperty(e)?o&&r?(i[e].datas[o]=a,i[e].keyId=n):r||(i[e].datas=Object.assign(i[e].datas,a),i[e].keyId=n):o&&r?i[e]={type:t,table:s,datas:{[o]:a},keyId:n}:r||(i[e]={type:t,table:s,datas:a,keyId:n})},g=(t,e)=>{this.args.debug&&(0,index_1.message)("DEBUG",`addAssociation in ${t.name} for parent`,e.name);const i=o(t,e),n=o(e,t);if(n&&i){const o=t.relations[i],r=e.relations[n];if(this.args.debug&&(0,index_1.message)("DEBUG","Found a parent relation in "+t.name,e.name),o.tableName==r.tableName&&o.tableName==t.table){this.args.debug&&(0,index_1.message)("INFO","Found a relation to do in sub query",e.name);const i=a[t.table],n=a[e.table];l(s.Relation,i,t.table,`@(select ${n}.id from ${n})@`,r.tableKey,r.columnRelation)}else if(o.tableName==r.tableName){if(o.tableName==e.table){const i=a[t.table],n=a[e.table];this.args.debug&&(0,index_1.message)("INFO",`Add parent relation ${i} in`,n),l(s.Relation,n,e.table,`@(select ${i}.id from ${i})@`,r.tableKey,o.columnRelation)}else if(o.tableName!=e.table&&o.tableName!=t.table){const i=a[t.table],n=a[e.table];this.args.debug&&(0,index_1.message)("INFO",`Add Table association ${i} in`,n),l(s.Association,o.tableName,o.tableName,{[t.table+"_id"]:`@(select ${i}.id from ${i})@`,[e.table+"_id"]:`@(select ${n}.id from ${n})@`},o.tableKey,void 0)}}else{const i=a[t.table],n=a[e.table];this.args.debug&&(0,index_1.message)("INFO",`Add Relation ${i} in`,n),l(s.Table,n,e.table,{[o.columnRelation]:`@(select ${i}.id from ${i})@`},o.tableKey,void 0)}}},h=(t,i)=>{const o=(0,index_1.getEntityName)(t);if(o){const t=constants_1._DBDATAS[o],r=(t=>{const e=a[t];let s=0;if(e){const t=e.match(/[0-9]/g);s=null!==t?Number(t.join("")):0}return`${t}${(s+1).toString()}`})(t.table);a[t.table]=r;const c=d(i,t,e);c&&(l(s.Table,r,t.table,c,"id",void 0),n--),e&&g(t,e)}};if(e&&r)for(const s in t)Array.isArray(t[s])?Object.entries(t[s]).forEach(([i,a])=>{e&&r&&Object.keys(e.relations).includes(s)?(this.args.debug&&(0,index_1.message)("INFO","Found a relation for "+e.name,s),h(s,a)):(this.args.debug&&(0,index_1.message)("INFO","data "+s,t[s]),c[s]=t[s])}):"object"==typeof t[s]?Object.keys(e.relations).includes(s)&&(this.args.debug&&(0,index_1.message)("DEBUG","Found a object relation for "+e.name,s),h(s,t[s])):c[s]=t[s];return c};if(this.args.entities.length>1){const e=(0,index_1.getEntityName)(this.args.entities[0]);this.args.debug&&(0,index_1.message)("DEBUG","Found entity : ",e);const s=e?constants_1._DBDATAS[e]:void 0,i=(0,index_1.getBigIntFromString)(this.args.entities[0]);if(e&&s&&i){const e=o(this.entityProperty,s);e&&(t[e]={"@iot.id":i.toString()})}}const c=d(t);return a[this.entityProperty.table]&&i[this.entityProperty.table]&&i[this.entityProperty.table].datas||c=={}?(i[this.entityProperty.table].datas=Object.assign(c,i[this.entityProperty.table].datas),i[this.entityProperty.table].keyId=e?"id":"*",r(`WITH "log_request" as (select id FROM "${constants_1._DBDATAS.Logs_request.table}" LIMIT 1)`)):r(e?c&&Object.entries(c).length>0?`WITH ${this.entityProperty.table} as (${Common.dbContext(this.entityProperty.table).update(c).where({id:e.toString()}).toString()} RETURNING *)`:`WITH ${this.entityProperty.table} as (${Common.dbContext(this.entityProperty.table).select().where({id:e.toString()}).toString()})`:`WITH ${this.entityProperty.table} as (${Common.dbContext(this.entityProperty.table).insert(c).toString()} RETURNING *)`)}}exports.Common=Common;