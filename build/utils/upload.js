"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.upload=void 0;const busboy_1=__importDefault(require("busboy")),path_1=__importDefault(require("path")),util_1=__importDefault(require("util")),fs_1=__importDefault(require("fs")),_1=require("."),upload=e=>{const t={};return new Promise(async(s,a)=>{const r=["csv","txt","json"];if(!fs_1.default.existsSync("./upload")){const e=util_1.default.promisify(fs_1.default.mkdir);await e("./upload").catch(e=>{t.state="ERROR",a(e)})}const o=new busboy_1.default({headers:e.req.headers});o.on("file",(e,s,o)=>{const u=path_1.default.extname(o).substr(1);r.includes(u)?(s.pipe(fs_1.default.createWriteStream("./upload/"+o)),t.file="./upload/"+o,s.on("data",e=>{t.state=`GET ${e.length} bytes`}),s.on("error",e=>{(0,_1.message)("ERROR",e.message)}),s.on("end",()=>{t.state="UPLOAD FINISHED",t[e]="./upload/"+o})):(t.state="UPLOAD UNALLOWED FILE",s.resume(),a(t))}),o.on("field",(e,s)=>{t[e]=s}),o.on("error",e=>{(0,_1.message)("ERROR",e.message),t.state="ERROR",a(e)}),o.on("finish",()=>{t.state="DONE",s(t)}),e.req.pipe(o)})};exports.upload=upload;