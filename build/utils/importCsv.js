"use strict";var __asyncValues=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,a){(function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)})(n,a,(t=e[r](t)).done,t.value)}))}}},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.importCsv=void 0;const pg_1=require("pg"),fs_1=__importDefault(require("fs")),pg_copy_streams_1=__importDefault(require("pg-copy-streams")),_1=require(".");let columns=[];const readline=require("readline");async function prepareImportFile(e){var t,r;const n=fs_1.default.createReadStream(e.filename),a=/^[0-9]{2}[\/][0-9]{2}[\/][0-9]{4}$/g,o=/^[0-9]{2}[:][0-9]{2}[:][0-9]{2}$/g,s=/^[0-9]{2}[\/][0-9]{2}[\/][0-9]{4} [0-9]{2}[:][0-9]{2}$/g,u=readline.createInterface({input:n,crlfDelay:1/0});try{for(var i,c=__asyncValues(u);!(i=await c.next()).done;){const t=i.value,r=t.split(";");if(1==s.test(r[0])){const r=(t.match(/;/g)||[]).length;e.debug&&(0,_1.message)("INFO","Date Hour"),columns=["datehour"];for(let e=0;e<r;e++)columns.push("value"+(e+1));return n.destroy(),`TO_TIMESTAMP("${e.tempTable}".datehour, 'DD/MM/YYYY HH24:MI:SS')`}if(1==a.test(r[0])&&1==o.test(r[1])){e.debug&&(0,_1.message)("INFO","date ; hour");const r=(t.match(/;/g)||[]).length;columns=["date","hour"];for(let e=0;e<r-1;e++)columns.push("value"+(e+1));return n.destroy(),`TO_TIMESTAMP(concat("${e.tempTable}".date, "${e.tempTable}".hour), 'DD/MM/YYYYHH24:MI:SS:MS')`}}}catch(e){t={error:e}}finally{try{i&&!i.done&&(r=c.return)&&await r.call(c)}finally{if(t)throw t.error}}}const importCsv=async(e,t)=>{const r=[],n=new pg_1.Pool({host:process.env.PGHOST,user:process.env.PGUSER,password:process.env.PGPASSWORD,database:process.env.PGDATABASE}),a=await prepareImportFile(t);if(a){await e.schema.createTable(t.tempTable,e=>{e.increments("id").unsigned().notNullable().primary(),columns.forEach(t=>{e.string(t)})});const o=`COPY ${t.tempTable} (${columns.join(",")}) FROM STDIN WITH (FORMAT csv, DELIMITER ';'${t.header})`,s=()=>{n.end()};await new Promise((e,u)=>{n.connect((n,i)=>{if(n)return void(t.debug&&(0,_1.message)("ERROR","pool.connect error:",n));const c=i.query(pg_copy_streams_1.default.from(o)).on("error",e=>{u(e)}),l=fs_1.default.createReadStream(t.filename);l.on("error",e=>{t.debug&&(0,_1.message)("ERROR","fileStream error",e),s(),u(e)}),l.on("error",e=>{t.debug&&(0,_1.message)("ERROR","streamError",e),s()}),l.on("end",async()=>{t.debug&&(0,_1.message)("INFO","COPY TO ",t.tempTable);const n=[],o=[];Object.keys(t.columns).forEach(async(e,r)=>{n.push(`${0==r?"WITH ":","} updated${r+1} as \n                            (insert into "observation" ("datastream_id", "featureofinterest_id", "phenomenonTime", "result")\n                            select ${t.columns[e]}, 1,  ${a},\n                            CASE "${t.tempTable}".value${e}\n                            WHEN '---' THEN \n                                NULL\n                            ELSE\n                                cast(REPLACE(value${e},',','.') as float)\n                            END\n                            from "${t.tempTable}" returning id)`),o.push(0==r?" SELECT id FROM updated1":" UNION SELECT id FROM updated"+(r+1))}),n.push(o.join(""));const u=await i.query(n.join(""));t.debug&&(0,_1.message)("INFO","SQL Executing","Ok"),u.rows.map(e=>e.id).forEach(e=>{r.push(e)}),s(),e(r)}),l.pipe(c)})})}return r};exports.importCsv=importCsv;